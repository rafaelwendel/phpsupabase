<?php

namespace PHPSupabase;

use Exception;
use GuzzleHttp\Psr7\Query;

class QueryBuilder {
    private $suffix = 'rest/v1/';
    private $service;
    private $query;
    private $result;

    /**
     * Construct method (Set the Service instance)
     * @access public
     * @param Service $service The Supabase Service instance
     * @return void
     */
    public function __construct(Service $service)
    {
        $this->service = $service;
    }

    /**
     * Returns the Service instance
     * @access public
     * @return Service
     */
    public function getService() : Service
    {
        return $this->service;
    }

    /**
     * Returns the result (data) generated by a fetch
     * @access public
     * @return array
     */
    public function getResult() : array
    {
        return $this->result;
    }

    /**
     * Returns the first result (data) generated by a fetch
     * @access public
     * @return object
     */
    public function getFirstResult() : mixed
    {
        return count($this->result) > 0
            ? $this->result[0]
            : [];
    }

    /**
     * Returns the error generated
     * @access public
     * @return string|null
     */
    public function getError() : string|null
    {
        return $this->service->getError();
    }

    /**
     * Add the "select" to the query
     * @access public
     * @param string $select The select (Ex: * OR column1, column2, ...)
     * @return QueryBuilder
     */
    public function select(string $select) : QueryBuilder
    {
        $this->query['select'] = $select;
        return $this;
    }

    /**
     * Add the "from" to the query
     * @access public
     * @param string $from The table to be used in query
     * @return QueryBuilder
     */
    public function from(string $from) : QueryBuilder
    {
        $this->query['from'] = $from;
        return $this;
    }

    /**
     * Make a "join" between the "from" table and another table related
     * @access public
     * @param string $tableable The related table
     * @param string $tablekey The foreign key (usually "id")
     * @param string $select Optional. The columns to be select in foreign table
     * @return QueryBuilder
     */
    public function join(string $table, string $tablekey, ?string $select = null) : QueryBuilder
    {
        $this->query['join'][] = $table . 
                                '(' . $tablekey . ',' .
                                (!is_null($select) ? $select : '*') . ')';
        return $this;
    }

    /**
     * Add the condition "where" to the query
     * @access public
     * @param string $column The column to be used in where clause
     * @param string $value The value of condition
     * @return QueryBuilder
     */
    public function where(string $column, string $value) : QueryBuilder
    {
        $this->query['where'][] = $column . '=' . urlencode($value);
        return $this;
    }

    /**
     * Add the "limit" to the query
     * @access public
     * @param int $limit The interval of fetch registers
     * @return QueryBuilder
     */
    public function limit(int $limit) : QueryBuilder
    {
        $this->query['limit'] = $limit;
        return $this;
    }

    /**
     * Add the "order" to the query
     * @access public
     * @param string $order The order by column
     * @return QueryBuilder
     */
    public function order(string $order) : QueryBuilder
    {
        $this->query['order'] = $order;
        return $this;
    }

    /**
     * Add the "range" to the query
     * @access public
     * @param string $range The interval of fetch registers
     * @return QueryBuilder
     */
    public function range(string $range) : QueryBuilder
    {
        $this->query['range'] = $range;
        return $this;
    }

    /**
     * Execute (prepare) the mounted query
     * @access public
     * @return QueryBuilder
     */
    public function execute() : QueryBuilder
    {
        $this->query['select'] = isset($this->query['select'])
                                ? $this->query['select']
                                : '*';
        if(!isset($this->query['from'])){
            throw new Exception('The table is not defined');
        }

        $queryString = 'select=' . $this->query['select'];
        
        if(isset($this->query['join'])){
            $queryString .= ',' . implode(',', $this->query['join']);
        }

        if(isset($this->query['where'])){
            $queryString .= '&' . implode('&', $this->query['where']);
        }

        if(isset($this->query['limit'])){
            $queryString .= '&limit=' . $this->query['limit'];
        }

        if(isset($this->query['order'])){
            $queryString .= '&order=' . $this->query['order'];
        }

        if(isset($this->query['range'])){
            $this->service->setHeader('Range', $this->query['range']);
        }
        
        $this->executeQuery($queryString);
        return $this;
    }

    /**
     * Execute the request to run the query
     * @access private
     * @param string $queryString A query string to be use in URL
     * @return void
     */
    private function executeQuery(string $queryString) : void
    {
        $uri = $this->service->getUriBase($this->suffix . $this->query['from'] . '?' . $queryString);
        $options = [
            'headers' => $this->service->getHeaders()
        ];
        $this->result = $this->service->executeHttpRequest('GET', $uri, $options);
    }
}
